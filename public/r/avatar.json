{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/ui/avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype AvatarImageStatus = \"loading\" | \"loaded\" | \"error\"\n\ninterface AvatarContextValue {\n\timageStatus: AvatarImageStatus\n\tsetImageStatus: (imageStatus: AvatarImageStatus) => void\n}\n\nconst AvatarContext = React.createContext<AvatarContextValue>({\n\timageStatus: \"loading\",\n\tsetImageStatus: () => {},\n})\n\nconst useAvatarContext = () => {\n\tconst context = React.useContext(AvatarContext)\n\n\tif (!context) {\n\t\tthrow new Error(\"useAvatarContext must be used within a Avatar.Root\")\n\t}\n\n\treturn context\n}\n\nconst avatarVariants = cva(\n\t\"relative flex shrink-0 overflow-hidden rounded-full\",\n\t{\n\t\tvariants: {\n\t\t\tsize: {\n\t\t\t\tsm: \"size-8 text-sm\",\n\t\t\t\tmd: \"size-10 text-base\",\n\t\t\t\tlg: \"size-12 text-lg\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tsize: \"md\",\n\t\t},\n\t}\n)\n\nexport interface AvatarProps\n\textends React.HTMLAttributes<HTMLDivElement>,\n\t\tVariantProps<typeof avatarVariants> {}\n\nconst Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(\n\t({ className, size, ...props }, ref) => {\n\t\tconst [imageStatus, setImageStatus] =\n\t\t\tReact.useState<AvatarImageStatus>(\"loading\")\n\n\t\treturn (\n\t\t\t<AvatarContext.Provider value={{ imageStatus, setImageStatus }}>\n\t\t\t\t<div\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName={cn(avatarVariants({ size }), className)}\n\t\t\t\t\t{...props}\n\t\t\t\t/>\n\t\t\t</AvatarContext.Provider>\n\t\t)\n\t}\n)\nAvatar.displayName = \"Avatar\"\n\nconst AvatarImage = React.forwardRef<\n\tHTMLImageElement,\n\tReact.ImgHTMLAttributes<HTMLImageElement>\n>(({ className, alt = \"\", onError, onLoad, ...props }, ref) => {\n\tconst { imageStatus, setImageStatus } = useAvatarContext()\n\n\tif (imageStatus === \"error\") {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<img\n\t\t\tref={ref}\n\t\t\tclassName={cn(\"aspect-square size-full object-cover\", className)}\n\t\t\talt={alt}\n\t\t\tonLoad={(e) => {\n\t\t\t\tsetImageStatus(\"loaded\")\n\t\t\t\tonLoad?.(e)\n\t\t\t}}\n\t\t\tonError={(e) => {\n\t\t\t\tsetImageStatus(\"error\")\n\t\t\t\tonError?.(e)\n\t\t\t}}\n\t\t\t{...props}\n\t\t/>\n\t)\n})\nAvatarImage.displayName = \"AvatarImage\"\n\nconst AvatarFallback = React.forwardRef<\n\tHTMLSpanElement,\n\tReact.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => {\n\tconst { imageStatus } = useAvatarContext()\n\n\tif (imageStatus === \"loaded\") {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<span\n\t\t\tref={ref}\n\t\t\tclassName={cn(\n\t\t\t\t\"flex size-full items-center justify-center rounded-full bg-muted text-muted-foreground\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t)\n})\nAvatarFallback.displayName = \"AvatarFallback\"\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}